/*
#Problem ID: 1446
#Submit Time: 2012-08-17 02:27:05
#Run Time: 1790
#Run Memory: 812
#ZOJ User: calvinxiao
*/

#include<iostream>
#include<cstdio>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

const int MAX = 20001;
const int BIG = 10000000;
int N;
struct ans {
    int cnt;
    int start;
    int end;
    char connect;
};
struct P {
    int start;
    int end;
};

vector<struct P> power[MAX];
struct ans dp[MAX];
int le[8] = {0, 1, 1, 1, 0, 1, 0, 1};
int fa[MAX];

void doit(int n) {
    if(dp[n].connect == '+' || dp[n].connect == '*' || dp[n].connect == '^') {
        cout << '(';
        doit(dp[n].start);
        cout << dp[n].connect;
        doit(dp[n].end);
        cout << ')';
    } else if(dp[n].connect == '!') {
        doit(dp[n].start);
        cout << '!';
    } else
        cout << dp[n].start;

}

int main() {
    //construct dp

    // special case
    int pre[MAX - 19900 - 1][5] = {{19901, 6, 2, 19899, '+'},{19902, 6, 2, 9951, '*'},{19903, 6, 120, 19783, '+'},{19904, 6, 5, 19899, '+'},{19905, 6, 3, 6635, '*'},{19906, 6, 2, 9953, '*'},{19907, 6, 224, 19683, '+'},{19908, 6, 2, 9954, '*'},{19909, 6, 43, 463, '*'},{19910, 6, 5, 3982, '*'},{19911, 6, 30, 19881, '+'},{19912, 6, 131, 152, '*'},{19913, 6, 32, 19881, '+'},{19914, 6, 2, 9957, '*'},{19915, 7, 1, 19914, '+'},{19916, 6, 35, 19881, '+'},{19917, 6, 3, 6639, '*'},{19918, 6, 343, 19575, '+'},{19919, 7, 1, 19918, '+'},{19920, 5, 120, 19800, '+'},{19921, 6, 1, 19920, '+'},{19922, 6, 2, 19920, '+'},{19923, 5, 120, 19803, '+'},{19924, 4, 5040, 14884, '+'},{19925, 5, 1, 19924, '+'},{19926, 5, 2, 19924, '+'},{19927, 5, 3, 19924, '+'},{19928, 5, 720, 19208, '+'},{19929, 5, 5, 19924, '+'},{19930, 5, 6, 19924, '+'},{19931, 5, 7, 19924, '+'},{19932, 4, 3125, 16807, '+'},{19933, 5, 1, 19932, '+'},{19934, 5, 2, 19932, '+'},{19935, 5, 3, 19932, '+'},{19936, 6, 1, 19935, '+'},{19937, 5, 5, 19932, '+'},{19938, 5, 6, 19932, '+'},{19939, 5, 7, 19932, '+'},{19940, 6, 1, 19939, '+'},{19941, 6, 2, 19939, '+'},{19942, 6, 3, 19939, '+'},{19943, 6, 5, 19938, '+'},{19944, 6, 5, 19939, '+'},{19945, 4, 4320, 15625, '+'},{19946, 5, 1, 19945, '+'},{19947, 5, 2, 19945, '+'},{19948, 5, 3, 19945, '+'},{19949, 6, 1, 19948, '+'},{19950, 5, 5, 19945, '+'},{19951, 5, 6, 19945, '+'},{19952, 5, 7, 19945, '+'},{19953, 6, 1, 19952, '+'},{19954, 6, 2, 19952, '+'},{19955, 6, 3, 19952, '+'},{19956, 6, 5, 19951, '+'},{19957, 5, 4332, 15625, '+'},{19958, 6, 1, 19957, '+'},{19959, 6, 2, 19957, '+'},{19960, 6, 3, 19957, '+'},{19961, 7, 1, 19960, '+'},{19962, 5, 2, 9981, '*'},{19963, 5, 4338, 15625, '+'},{19964, 6, 1, 19963, '+'},{19965, 5, 3, 6655, '*'},{19966, 6, 1, 19965, '+'},{19967, 6, 2, 19965, '+'},{19968, 5, 128, 156, '*'},{19969, 6, 1, 19968, '+'},{19970, 6, 2, 19968, '+'},{19971, 6, 3, 19968, '+'},{19972, 6, 2, 9986, '*'},{19973, 6, 5, 19968, '+'},{19974, 6, 2, 9987, '*'},{19975, 5, 4350, 15625, '+'},{19976, 6, 1, 19975, '+'},{19977, 6, 2, 19975, '+'},{19978, 6, 3, 19975, '+'},{19979, 7, 1, 19978, '+'},{19980, 6, 2, 9990, '*'},{19981, 5, 4356, 15625, '+'},{19982, 6, 1, 19981, '+'},{19983, 6, 2, 19981, '+'},{19984, 5, 3600, 16384, '+'},{19985, 6, 1, 19984, '+'},{19986, 6, 2, 19984, '+'},{19987, 5, 4362, 15625, '+'},{19988, 6, 1, 19987, '+'},{19989, 6, 2, 19987, '+'},{19990, 6, 3, 19987, '+'},{19991, 6, 7, 19984, '+'},{19992, 6, 5, 19987, '+'},{19993, 6, 6, 19987, '+'},{19994, 6, 2, 9997, '*'},{19995, 6, 3, 6665, '*'},{19996, 6, 64, 19932, '+'},{19997, 7, 1, 19996, '+'},{19998, 6, 3, 6666, '*'},{19999, 5, 4374, 15625, '+'},{20000, 5, 2, 10000, '*'}};
    for(int i = 0; i < 100; ++i) {
        dp[pre[i][0]].cnt = pre[i][1];
        dp[pre[i][0]].start = pre[i][2];
        dp[pre[i][0]].end = pre[i][3];
        dp[pre[i][0]].connect = pre[i][4];
    }

    for(int i = 0; i < 8; ++i) {
        if(le[i]) {
            dp[i].cnt = 1;
            dp[i].start = i;
            dp[i].end = i;
            dp[i].connect = '0';
        }
    }

    int cnt = 0;
    int start = 3;
    int product = 6;
    while(product < MAX) {
        fa[product] = start;
        start += 1;
        product *= start;
    }

    //construct = power...
    for(int i = 2; i < 151; ++i) {
        int pow = i;
        for(int j = 2; j < 17; ++j) {
            if(pow * i < MAX) {
                pow *= i;
                struct P temp;
                temp.start = i;
                temp.end = j;
                power[pow].push_back(temp);
            } else
                break;
        }
    }
    //cout << power[32].flag << ' ' << power[32].start << endl;
    for(int i = 4; i < MAX; ++i) {
        if(dp[i].cnt == 0) {
            dp[i].cnt = BIG;
            if(fa[i]) {
                int temp = dp[fa[i]].cnt;
                if(temp < dp[i].cnt) {
                    dp[i].cnt = temp;
                    dp[i].start = fa[i];
                    dp[i].end = fa[i];
                    dp[i].connect = '!';
                }
            }
            for(int k = 0; k < power[i].size(); ++k) {
                int b = power[i][k].start;
                int u = power[i][k].end;
                int temp = dp[b].cnt + dp[u].cnt;
                if(temp < dp[i].cnt) {
                    dp[i].cnt = temp;
                    dp[i].start = b;
                    dp[i].end = u;
                    dp[i].connect = '^';
                }
            }
            for(int j = 1; j <= i/2; ++j) {
                if(1) {
                    int k = i - j;
                    int temp = dp[j].cnt + dp[k].cnt;
                    if(temp < dp[i].cnt) {
                        dp[i].cnt = temp;
                        dp[i].start = j;
                        dp[i].end = k;
                        dp[i].connect = '+';
                    }
                    if(i % j == 0) {
                        k = i / j;
                        temp = dp[j].cnt + dp[k].cnt;
                        if(temp < dp[i].cnt) {
                            dp[i].cnt = temp;
                            dp[i].start = j;
                            dp[i].end = k;
                            dp[i].connect = '*';
                        }
                    }
                }
            }
        }
    }

//    for(int i = 0; i < MAX; ++i) {
//        cout <<'{';
//        printf("{%d, %d, %d, %d, '%c'}", i, dp[i].cnt, dp[i].start, dp[i].end, dp[i].connect);
//        cout << '}';
//    }


    while(cin >> N) {
        doit(N);
        cout << endl;
    }
    return 0;
}
